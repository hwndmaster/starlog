using System.Globalization;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media;
using Genius.Starlog.UI.ViewModels;
using Microsoft.Xaml.Behaviors;

namespace Genius.Starlog.UI.Behaviors;

public class LogLevelColorizeBehavior : Behavior<DataGrid>
{
    protected override void OnAttached()
    {
        AssociatedObject.AutoGeneratedColumns += OnAutoGeneratedColumns;

        base.OnAttached();
    }

    protected override void OnDetaching()
    {
        AssociatedObject.AutoGeneratedColumns -= OnAutoGeneratedColumns;

        base.OnDetaching();
    }

    private void OnAutoGeneratedColumns(object? sender, EventArgs args)
    {
        var binding = new Binding(".")
        {
            Converter = new LogLevelToColorConverter(AssociatedObject)
        };

        foreach (var column in AssociatedObject.Columns)
        {
            column.CellStyle.Setters.Add(new Setter(Control.ForegroundProperty, binding));
        }
    }

    public sealed class LogLevelToColorConverter : IValueConverter
    {
        private readonly Color _standardColor;

        public LogLevelToColorConverter(FrameworkElement anyElement)
        {
            _standardColor = (Color)anyElement.FindResource("MahApps.Colors.ThemeForeground");
        }

        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is not LogItemViewModel vm)
            {
                throw new InvalidOperationException("Expected a view model of LogItemViewModel type.");
            }

            var color = vm.Record.Level.Severity switch
            {
                Core.LogFlow.LogSeverity.Minor => Colors.DimGray,
                Core.LogFlow.LogSeverity.Attention => Colors.Yellow,
                Core.LogFlow.LogSeverity.Major => Colors.Red,
                Core.LogFlow.LogSeverity.Critical => Colors.DarkRed,
                _ => _standardColor,
            };

            return new SolidColorBrush(color);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
